
@mixin checkbox-default($size: 30px, $round: false) {
  $border-radius: 5px;
  @if ($round == true) { $border-radius: 50%; }
  display: flex;
  align-items: flex-start;
  position: relative;
  cursor: pointer;
  margin-bottom: 0;
  transition: .15s ease-in-out;
  display: flex;
  align-items: center;
  min-height: rem($size);
  min-width: rem($size);
  &::before,
  &::after {
    position: absolute;
    height: rem($size);
    width: rem($size);
    left: 0;
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  &::before {
    content: '';
    display: block;
    background: $white;
    border: 2px solid $gray-040;
    transition: .15s ease-in-out;
    color: $gray-025;
    border-radius: $border-radius;
  }
  &::after {
    $icon: map-get($icons, checkmark);
    font-family: 'icons';
    content: $icon;
    color: $gray-020;
  }
  span {
    padding-left: calc(#{rem($size)} + #{space(2)})
  }
}

@mixin checkbox-checked() {
  &::before {
    background: $brand-success-l;
    border-color: $brand-success;
  }
  &::after {
    color: darken($brand-success, 10%);
  }
  &:hover,
  &:focus {
    &::before {
      background: rgba($brand-success-l, .5);
      transform: scale(.95);
    }
    &::after {
      color: lighten(desaturate($brand-success, 35%), 10%);
      transform: scale(.95);
    }
  }
  &:active {
    outline: 0;
    box-shadow: none;
    &::before,
    &::after {
      transform: scale(.75);
    }
  }
}

@mixin checkbox-not-checked() {
  &:hover,
  &:focus {
    &::before {
      transform: scale(.95);
      background: rgba($brand-success-l, .5);
      border-color: $brand-success;
    }
    &::after {
      transform: scale(.95);
      color: lighten(desaturate($brand-success, 35%), 10%);
    }
  }
  &:active {
    outline: 0;
    box-shadow: none;
    &::before,
    &::after {
      transform: scale(.75);
    }
  }
}

@mixin tag-pill {
  border-radius: 10px;
  padding: space(1) space(3);
  font-size: 0.7rem;
  font-weight: bold;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  align-items: center;
}

// Copied from Bootstrap source:
// https://github.com/twbs/bootstrap/blob/master/scss/_forms.scss
@mixin form-control {
  display: block;
  width: 100%;
  height: $input-height;
  padding: $input-padding-y $input-padding-x;
  font-family: $input-font-family;
  @include font-size($input-font-size);
  font-weight: $input-font-weight;
  line-height: $input-line-height;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;
  border: $input-border-width solid $input-border-color;

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @include border-radius($input-border-radius, 0);

  @include box-shadow($input-box-shadow);
  @include transition($input-transition);

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  &::placeholder {
    color: $input-placeholder-color;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    background-color: $input-disabled-bg;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }
}
