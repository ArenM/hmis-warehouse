- if @report.report.with_indifferent_access[:bed_utilization].present?
  %table.table.table-condensed
    %thead
      %tr
        %th{colspan: 4}
        %th{colspan: 2, class: 'lightest-gray'} Average Daily
        %th{colspan: 2}= @report.start
        %th{colspan: 2, class: 'lightest-gray'} 15th of Month
        %th{colspan: 2}= @report.end
      %tr
        %th Project Name
        %th Project Type
        %th Grade
        %th Capacity
        %th{class: 'lightest-gray'} Persons
        %th{class: 'lightest-gray'} % Capacity
        %th Persons
        %th % Capacity
        %th{class: 'lightest-gray'} Persons
        %th{class: 'lightest-gray'} % Capacity
        %th Persons
        %th % Capacity
    %tbody
      - @report.report.with_indifferent_access[:bed_utilization].each do |project|
        - capacity = project[:capacity]
        - average_daily = project[:average_daily]
        - average_daily_percent = if average_daily > 0 && capacity > 0 then (average_daily.to_f / capacity) * 100 else 0 end
        - grade = GrdaWarehouse::Grades::Utilization.grade_from_score(average_daily_percent)
        - p_type = ::HUD.project_type_brief(project[:project_type])
        - p_class = "client__service_type_#{p_type}"
        %tr
          %td= project[:name]
          %td
            %span{class: "client__service_type_#{project[:project_type]}"}
              .enrollment__project_type{class: p_class}
                %em.service-type__program-type= p_type
          %td.text-center{style: "background-color: #{grade.color}; color: white; font-weight: bold;"}= grade.grade
          
          %td= project[:capacity]
          - [:average_daily, :first_of_month, :fifteenth_of_month, :last_of_month].each_with_index do |measure, index|
            - odd_class = if index % 2 == 1 then '' else 'lightest-gray' end 
            %td{class: odd_class}
              - key = "bed_utilization_#{project[:id]}_#{measure}"
              = link_to support_project_group_data_quality_report_path(@project_group, @report, {key: key}), data: {loads_in_pjax_modal: true} do
                = project[measure]
            %td{class: odd_class}
              - if project[measure] != 0 && project[:capacity] != 0
                = "#{(project[measure].to_f  / project[:capacity] * 100).round(1) rescue 0}%"